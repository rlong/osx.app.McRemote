(*######################################################### STATUS######################################################### *)on app_status()	set answer to {}	tell application id "com.apple.DVDPlayer"		set answer to answer & {app_initializing:app initializing}		set answer to answer & {has_media:has media}				set answer to answer & {dvd_scan_rate:dvd scan rate as string}		set answer to answer & {viewer_full_screen:viewer full screen}		set answer to answer & {audio_volume:audio volume}		set answer to answer & {displaying_subtitle:displaying subtitle}		set answer to answer & {closed_captioning:closed captioning}	end tell	return answerend app_status--app_status()on dvd_status()	set answer to {}	tell application id "com.apple.DVDPlayer"				set answer to answer & {has_media:has media}		set answer to answer & {dvd_menu_active:dvd menu active}		set answer to answer & {dvd_state:dvd state as string}				set answer to answer & {elapsed_time:elapsed time}		set answer to answer & {title_length:title length}		set answer to answer & {current_chapter:chapter}		set answer to answer & {available_chapters:available chapters}		--set answer to answer & {video_clip_list:video clip list}	end tell	return answerend dvd_status--dvd_status()(*######################################################### APPLICATION CONTROL ######################################################### *)on activate_dvd_player()	activate application id "com.apple.DVDPlayer"	return app_status()end activate_dvd_player--activate_dvd_player()on set_viewer_full_screen(viewer_full_screen)	tell application id "com.apple.DVDPlayer"		set viewer full screen to viewer_full_screen	end tell	return app_status()	end set_viewer_full_screen--set_viewer_full_screen(true)--set_viewer_full_screen(false)on set_audio_volume(audio_volume)	tell application id "com.apple.DVDPlayer"		set audio volume to audio_volume	end tell	return app_status()end set_audio_volume--set_audio_volume(0)on set_displaying_subtitle(displaying_subtitle)	tell application id "com.apple.DVDPlayer"		set displaying subtitle to displaying_subtitle	end tell	return app_status()end set_displaying_subtitle--set_displaying_subtitle(true)--set_displaying_subtitle(false)on eject_dvd()	tell application id "com.apple.DVDPlayer"		eject dvd	end tell	return app_status()end eject_dvd--eject_dvd()(*######################################################### PLAYBACK CONTROL ######################################################### *)on play_pause_dvd()	tell application id "com.apple.DVDPlayer"		if dvd state is equal to paused then			play dvd		else			pause dvd		end if	end tell	return dvd_status()end play_pause_dvd--play_pause_dvd()on play_dvd()	tell application id "com.apple.DVDPlayer"		play dvd	end tell	return dvd_status()end play_dvd--play_dvd()on pause_dvd()	tell application id "com.apple.DVDPlayer"		pause dvd	end tell	return dvd_status()end pause_dvd--pause_dvd()on fast_forward_dvd(dvd_scan_rate)	tell application id "com.apple.DVDPlayer"				if dvd_scan_rate is equal to "x2" then			set dvd scan rate to x2		else if dvd_scan_rate is equal to "x4" then			set dvd scan rate to x4		else if dvd_scan_rate is equal to "x8" then			set dvd scan rate to x8		else if dvd_scan_rate is equal to "x16" then			set dvd scan rate to x16		else if dvd_scan_rate is equal to "x32" then			set dvd scan rate to x32		end if				fast forward dvd	end tell	return dvd_status()end fast_forward_dvd--fast_forward_dvd()on rewind_dvd(dvd_scan_rate)	tell application id "com.apple.DVDPlayer"				if dvd_scan_rate is equal to "x2" then			set dvd scan rate to x2		else if dvd_scan_rate is equal to "x4" then			set dvd scan rate to x4		else if dvd_scan_rate is equal to "x8" then			set dvd scan rate to x8		else if dvd_scan_rate is equal to "x16" then			set dvd scan rate to x16		else if dvd_scan_rate is equal to "x32" then			set dvd scan rate to x32		end if				rewind dvd	end tell	return dvd_status()end rewind_dvd--rewind_dvd()on play_next_chapter()	tell application id "com.apple.DVDPlayer"		play next chapter	end tell	return dvd_status()end play_next_chapter--play_next_chapter()on play_previous_chapter()	tell application id "com.apple.DVDPlayer"		play previous chapter	end tell	return dvd_status()end play_previous_chapter--play_previous_chapter()(*######################################################### MENU ######################################################### *)on go_to_main_menu()	tell application id "com.apple.DVDPlayer"		go to main menu	end tell	return dvd_status()end go_to_main_menu--go_to_main_menu()on press_down_arrow_key()	tell application id "com.apple.DVDPlayer"		press down arrow key	end tell	return dvd_status()end press_down_arrow_key--press_down_arrow_key()on press_up_arrow_key()	tell application id "com.apple.DVDPlayer"		press up arrow key	end tell	return dvd_status()end press_up_arrow_key-- press_up_arrow_key()on press_left_arrow_key()	tell application id "com.apple.DVDPlayer"		press left arrow key	end tell	return dvd_status()end press_left_arrow_key--press_left_arrow_key()on press_right_arrow_key()	tell application id "com.apple.DVDPlayer"		press right arrow key	end tell	return dvd_status()end press_right_arrow_key--press_right_arrow_key()on press_enter_key()	tell application id "com.apple.DVDPlayer"		press enter key	end tell	return dvd_status()end press_enter_key-- press_enter_key()----------------------------------------------------------- Version 2 Functionality begins here ---------------------------------------------------------(*######################################################### APPLICATION CONTROL V2######################################################### *)on open_dvd_video_folder(file_path)	tell application id "com.apple.DVDPlayer"		set file_reference to a reference to file file_path		open dvd video folder file_reference	end tell	return app_status()end open_dvd_video_folder--open_dvd_video_folder("scratch-disk:rlong.scratch:video.dvd")--open_dvd_video_folder("scratch-disk:rlong.scratch:video.dvd")on set_closed_captioning(closed_captioning)	tell application id "com.apple.DVDPlayer"		set closed captioning to closed_captioning	end tell	return app_status()end set_closed_captioning--set_closed_captioning(true)--set_closed_captioning(false)(*######################################################### Finder / File System######################################################### *)on list_roots()	set answer to {}		tell application "Finder"				-- first the disks ... 		set all_disks to disks		--repeat with disk_ref in disks -- ... does not work		repeat with disk_ref in all_disks			set _disk to {_name:name of disk_ref}			set _disk to _disk & {_path:disk_ref as alias as text}			set _disk to _disk & {_type:"disk"}			set _disk to _disk & {_ejectable:ejectable of disk_ref}			set _disk to _disk & {_startup:startup of disk_ref}			set _disk to _disk & {_local_volume:local volume of disk_ref}						copy _disk to the end of answer			--set answer to answer & {folder_info}		end repeat				-- next the home folder ...		set home_ref to home as alias		if folder (home_ref as text) exists then			set _home to {_name:name of home}			set _home to _home & {_path:home_ref as text as text}			set _home to _home & {_type:"home"}			set _home to _home & {_ejectable:false}			set _home to _home & {_startup:false}			set _home to _home & {_local_volume:true}			copy _home to the end of answer		end if	end tell	return answerend list_roots--list_roots()on list_path(folder_path)		set answer to {_folder_path:folder_path}		tell application "Finder"				set answer to answer & {_name:name of folder folder_path}				set quick_and_dirty to false				set sub_folders to name of folders of folder folder_path		set answer to answer & {_folders:sub_folders}		set answer to answer & {_files:{}}		--set _files to name of files of folder folder_path -- not interested for dvd-remote	end tell		return answerend list_path--list_path("scratch-disk:")--list_path("hard-disk:Library:")--list_path("hard-disk:Applications:")on file_info(file_path)		tell application "Finder"		set file_info_ref to info for file file_path		set answer to {_file_path:file_path}		set answer to answer & {_alias:alias of file_info_ref}		set answer to answer & {_type_identifier:type identifier of file_info_ref as string}		if file_info_ref contains {locked:true} then			set answer to answer & {_locked:true}		else			set answer to answer & {_locked:false}		end if		if file_info_ref contains {busy status:true} then			set answer to answer & {_busy_status:true}		else			set answer to answer & {_busy_status:false}		end if		return answer	end tell	end file_info--file_info("shared-disk:system-tests.presentation-remote:chapter00_Introduction.ppt")