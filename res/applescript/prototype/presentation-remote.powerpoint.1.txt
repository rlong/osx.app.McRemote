(*######################################################### UTILITY ######################################################### *)on get_presentation_ref(presentation_name, presentation_full_name)	tell application id "com.microsoft.PowerPoint"				if 0 is not equal to length of presentation_name then			set wrapped_answer to presentations whose name is presentation_name			if missing value = wrapped_answer then				error "can't find file " & "\"" & presentation_name & "\"" number 7001			end if			return item 1 of wrapped_answer		else			set wrapped_answer to presentations whose full name is presentation_full_name			if missing value = wrapped_answer then				error "can't find file " & "\"" & presentation_full_name & "\"" number 7002			end if						return item 1 of wrapped_answer		end if	end tellend get_presentation_ref--get_presentation_ref("Presentation1.pptx", "")--get_presentation_ref("Presentation1.bad-name.pptx", "") -- 7001--get_presentation_ref("", "shared-disk:system-tests.presentation-remote:Presentation1.pptx")--get_presentation_ref("", "shared-disk:system-tests.presentation-remote:Presentation1.bad-name.pptx") -- 7002(*######################################################### APPLICATION STATE ######################################################### *)on get_presentation_state(presentation_ref)	set answer to {}	tell application id "com.microsoft.PowerPoint"		set answer to answer & {_name:name of presentation_ref}		set answer to answer & {_full_name:full name of presentation_ref}		set answer to answer & {_slide_count:count of slides of presentation_ref}	end tell	return answerend get_presentation_state(*open_file("shared-disk:system-tests.presentation-remote:Presentation1.pptx")set presentation_ref to get_presentation_ref("Presentation1.pptx", "")set answer to get_presentation_state(presentation_ref)close_presentation("Presentation1.pptx", "")return answer*)on get_powerpoint_state()	tell application id "com.microsoft.PowerPoint"		set answer to {}		set all_presentations to presentations		repeat with presentation_ref in all_presentations			copy my get_presentation_state(presentation_ref) to end of answer		end repeat		return answer		return presentations		(* 		-- the following runs much slower ... 		repeat with presentation_ref in presentations		end repeat		*)		return answer	end tellend get_powerpoint_state(*open_file("shared-disk:system-tests.presentation-remote:Presentation1.pptx")set answer to get_powerpoint_state()close_presentation("Presentation1.pptx", "")return answer*)(*######################################################### APPLICATION CONTROL ######################################################### *)on activate_powerpoint()	activate application id "com.microsoft.PowerPoint"	return get_powerpoint_state()end activate_powerpoint--activate_powerpoint()(*######################################################### FILE / DOCUMENT CONTROL ######################################################### *)on open_file(file_path)	tell application id "com.microsoft.PowerPoint"		open file file_path	end tell	return get_powerpoint_state()end open_file(*open_file("shared-disk:system-tests.presentation-remote:Presentation1.pptx")delay 2close_presentation("Presentation1.pptx", "")*)on close_presentation(presentation_name, presentation_full_name)	tell application id "com.microsoft.PowerPoint"		set presentation_ref to my get_presentation_ref(presentation_name, presentation_full_name)		close presentation_ref	end tell	return get_powerpoint_state()end close_presentation(*open_file("shared-disk:system-tests.presentation-remote:Presentation1.pptx")delay 2close_presentation("Presentation1.pptx", "")*)(*######################################################### SLIDES STATE ######################################################### *)on get_slide_state(slide_ref)	set answer to {_title:""}		tell application id "com.microsoft.PowerPoint"		set answer to answer & {_slide_number:slide number of slide_ref}		set shapes_ref to shapes of slide_ref		repeat with shape_ref in shapes_ref			if has text frame of shape_ref then				set _placeholder_type to placeholder type of shape_ref as string				set text_frame_ref to text frame of shape_ref				set text_range_ref to text range of text_frame_ref				if _placeholder_type contains "subtitle" then					-- set _sub_title of answer to (content of text_range_ref)				else if _placeholder_type contains "title" then					set _title of answer to content of text_range_ref					-- we are done, no need to look through any more shapes					return answer				end if			end if		end repeat				--set answer to answer & {_shapes:my get_shapes_state(shapes_ref)}	end tell		return answerend get_slide_state(*open_file("shared-disk:system-tests.presentation-remote:Presentation1.pptx")set answer to {}tell application id "com.microsoft.PowerPoint"	set answer to my get_slide_state(first slide of presentation 1)end tellclose_presentation("Presentation1.pptx", "")return answer*)on get_slides_state_by_ref(slides_ref)	set answer to {}	repeat with slide_ref in slides_ref		set slide_state to get_slide_state(slide_ref)		copy slide_state to the end of answer	end repeat	return answer	end get_slides_state_by_ref(*open_file("shared-disk:system-tests.presentation-remote:Presentation1.pptx")set answer to {}tell application id "com.microsoft.PowerPoint"	set answer to my get_slides_state_by_ref(slides of presentation 1)end tellclose_presentation("Presentation1.pptx", "")return answer*)on get_all_slides_state_for_presentation(presentation_name, presentation_full_name)	set presentation_ref to get_presentation_ref(presentation_name, presentation_full_name)	tell application id "com.microsoft.PowerPoint"		set slides_ref to slides of presentation_ref		return {presentation_name, presentation_full_name, my get_slides_state_by_ref(slides_ref)}	end tell	end get_all_slides_state_for_presentation(*open_file("shared-disk:system-tests.presentation-remote:Presentation1.pptx")set answer to get_all_slides_state_for_presentation("Presentation1.pptx", "", 1, 3)close_presentation("Presentation1.pptx", "")return answer*)on get_slides_state_for_presentation(presentation_name, presentation_full_name, starting_slide, ending_slide)		set presentation_ref to get_presentation_ref(presentation_name, presentation_full_name)	--return name of presentation_ref	tell application id "com.microsoft.PowerPoint"		--return slides of presentation_ref		set slides_ref to slides of presentation_ref		set slide_set to items starting_slide thru ending_slide of slides_ref		--set slide_set to items starting_slide thru ending_slide of (slides of presentation_ref) -- ... does not work		--set slide_set to items starting_slide thru ending_slide of slides of presentation_ref -- ... does not work		return {presentation_name, presentation_full_name, my get_slides_state_by_ref(slide_set)}	end tell	--return get_slides_state_by_ref(slide_set)end get_slides_state_for_presentation(*open_file("shared-disk:system-tests.presentation-remote:Presentation1.pptx")set answer to get_slides_state_for_presentation("Presentation1.pptx", "", 1, 3)close_presentation("Presentation1.pptx", "")return answer*)on get_slide_notes(presentation_name, presentation_full_name, slide_number)	set presentation_ref to get_presentation_ref(presentation_name, presentation_full_name)	tell application id "com.microsoft.PowerPoint"		set slide_ref to slide slide_number of presentation_ref		set notes_ref to notes page of slide_ref		set shapes_ref to shapes of notes_ref		repeat with shape_ref in shapes_ref			set _placeholder_type to placeholder type of shape_ref as string			if _placeholder_type contains "body" then				set text_frame_ref to text frame of shape_ref				set text_range_ref to text range of text_frame_ref				return content of text_range_ref			end if		end repeat		return ""	end tellend get_slide_notes(*open_file("shared-disk:system-tests.presentation-remote:Presentation1.pptx")set answer to get_slide_notes("Presentation1.pptx", "", 3)close_presentation("Presentation1.pptx", "")return answer*)(*######################################################### SLIDE SHOW ######################################################### *)on get_slide_show_state_auxiliary(presentation_ref)	set default_answer to {_state:"stopped", _current_show_position:0}		tell application id "com.microsoft.PowerPoint"				set slide_show_window_ref to slide show window of presentation_ref		if missing value = slide_show_window_ref then			return default_answer		end if				set slide_show_view_ref to slide show view of slide_show_window_ref		if missing value = slide_show_view_ref then			return default_answer		end if				if missing value = slide_show_view_ref then			return default_answer		end if				return {_state:"running", _current_show_position:current show position of slide_show_view_ref}			end tell	end get_slide_show_state_auxiliaryon get_slide_show_state(presentation_ref)			try		with timeout of 3 seconds			return my get_slide_show_state_auxiliary(presentation_ref)		end timeout	on error		-- we assume we got a timeout error as a result of a problem internally in PowerPoint		return my get_slide_show_state_auxiliary(presentation_ref)			end try	end get_slide_show_stateon go_to_slide(slide_number)	tell application "System Events"		set powerpoint_process to first application process whose bundle identifier is "com.microsoft.PowerPoint"		tell process powerpoint_process						set slide_number_string to slide_number as string -- to string			set slide_number_character_array to characters of slide_number_string -- to char array			repeat with slide_number_character in slide_number_character_array				set slide_number_character_digit to slide_number_character as integer				set key_code to 82 + slide_number_character_digit -- 82 == 0x52 == numeric pad '0'				if slide_number_character_digit is greater than 7 then					set key_code to key_code + 1				end if				key code key_code			end repeat			key code 36 -- RETURN 0x24					end tell	end tell	end go_to_slide(*open_file("shared-disk:system-tests.presentation-remote:Presentation1.pptx")run_slide_show("Presentation1.pptx", "", 1)go_to_slide(4)delay 1exit_slide_show("Presentation1.pptx", "")close_presentation("Presentation1.pptx", "")*)on run_slide_show(presentation_name, presentation_full_name, starting_slide)	set presentation_ref to get_presentation_ref(presentation_name, presentation_full_name)	tell application id "com.microsoft.PowerPoint"						set slide_show_window_ref to missing value				-- workaround for a bug/feature begin { ... 		-- if( presentation_ref->"slide show window"->presentation != presentation_ref )		set current_slide_show_window_ref to slide show window of presentation_ref		if current_slide_show_window_ref is not missing value then						if presentation of current_slide_show_window_ref is equal to presentation_ref then				set slide_show_window_ref to current_slide_show_window_ref			else				set old_slide_show_view_ref to slide show view of current_slide_show_window_ref				if missing value is not equal to old_slide_show_view_ref then					exit slide show old_slide_show_view_ref				end if			end if		end if		-- workaround for a bug/feature end } ... 				-- reuse the existing slide_show_window_ref if it exists		if slide_show_window_ref is missing value then			set slide_show_window_ref to run slide show slide show settings of presentation_ref		end if				set slide_show_view_ref to slide show view of slide_show_window_ref				if current show position of slide_show_view_ref is not equal to starting_slide then						-- go to slide slide_show_view_ref number starting_slide			my go_to_slide(starting_slide)		end if				return my get_slide_show_state(presentation_ref)					end tellend run_slide_show(*open_file("shared-disk:system-tests.presentation-remote:Presentation1.pptx")run_slide_show("Presentation1.pptx", "", 3)delay 1exit_slide_show("Presentation1.pptx", "")close_presentation("Presentation1.pptx", "")*)on exit_slide_show(presentation_name, presentation_full_name)	set presentation_ref to get_presentation_ref(presentation_name, presentation_full_name)	tell application id "com.microsoft.PowerPoint"				set slide_show_window_ref to slide show window of presentation_ref		if missing value = slide_show_window_ref then			return		end if				set slide_show_view_ref to slide show view of slide_show_window_ref		if missing value = slide_show_view_ref then			return		end if				exit slide show slide_show_view_ref		return	end tellend exit_slide_show(*open_file("shared-disk:system-tests.presentation-remote:Presentation1.pptx")run_slide_show("Presentation1.pptx", "", 3)delay 1exit_slide_show("Presentation1.pptx", "")close_presentation("Presentation1.pptx", "")*)on go_to_next_slide(presentation_name, presentation_full_name)	set presentation_ref to get_presentation_ref(presentation_name, presentation_full_name)	tell application id "com.microsoft.PowerPoint"				set slide_show_window_ref to slide show window of presentation_ref		if missing value = slide_show_window_ref then			return my get_slide_show_state(presentation_ref)		end if				set slide_show_view_ref to slide show view of slide_show_window_ref		if missing value = slide_show_view_ref then			return my get_slide_show_state(presentation_ref)		end if				go to next slide slide_show_view_ref		return my get_slide_show_state(presentation_ref)	end tell	end go_to_next_slide(*open_file("shared-disk:system-tests.presentation-remote:Presentation1.pptx")run_slide_show("Presentation1.pptx", "", 3)delay 1go_to_next_slide("Presentation1.pptx", "")delay 1exit_slide_show("Presentation1.pptx", "")close_presentation("Presentation1.pptx", "")*)on go_to_previous_slide(presentation_name, presentation_full_name)	set presentation_ref to get_presentation_ref(presentation_name, presentation_full_name)	tell application id "com.microsoft.PowerPoint"				set slide_show_window_ref to slide show window of presentation_ref		if missing value = slide_show_window_ref then			return my get_slide_show_state(presentation_ref)		end if				set slide_show_view_ref to slide show view of slide_show_window_ref		if missing value = slide_show_view_ref then			return my get_slide_show_state(presentation_ref)		end if				go to previous slide slide_show_view_ref		return my get_slide_show_state(presentation_ref)	end tell	end go_to_previous_slide(*open_file("shared-disk:system-tests.presentation-remote:Presentation1.pptx")run_slide_show("Presentation1.pptx", "", 3)delay 1go_to_previous_slide("Presentation1.pptx", "")delay 1exit_slide_show("Presentation1.pptx", "")close_presentation("Presentation1.pptx", "")*)(*######################################################### Finder / File System######################################################### *)on list_roots()	set answer to {}		tell application "Finder"				-- first the disks ... 		set all_disks to disks		--repeat with disk_ref in disks -- ... does not work		repeat with disk_ref in all_disks			set _disk to {_name:name of disk_ref}			set _disk to _disk & {_path:disk_ref as alias as text}			set _disk to _disk & {_type:"disk"}			set _disk to _disk & {_ejectable:ejectable of disk_ref}			set _disk to _disk & {_startup:startup of disk_ref}			set _disk to _disk & {_local_volume:local volume of disk_ref}						copy _disk to the end of answer			--set answer to answer & {folder_info}		end repeat				-- next the home folder ...		set home_ref to home as alias		if folder (home_ref as text) exists then			set _home to {_name:name of home}			set _home to _home & {_path:home_ref as text as text}			set _home to _home & {_type:"home"}			set _home to _home & {_ejectable:false}			set _home to _home & {_startup:false}			set _home to _home & {_local_volume:true}			copy _home to the end of answer		end if	end tell	return answerend list_roots--list_roots()on list_path(folder_path)		set answer to {_folder_path:folder_path}	set _sub_folders to {}	set _files to {}		set quick_and_dirty to true		if quick_and_dirty then		tell application "Finder"			set _sub_folders to name of folders of folder folder_path			set _files to name of files of folder folder_path		end tell	else -- slower but more technically correct 		tell application "Finder"						set target_container to alias folder_path			set contained_folders to folders of target_container			--repeat with sub_folder_ref in folders of target_container -- ... does not work			repeat with sub_folder_ref in contained_folders				set sub_folder to {_name:name of sub_folder_ref}				set sub_folder to sub_folder & {_path:sub_folder_ref as alias as text}				copy sub_folder to the end of _sub_folders			end repeat						set contained_files to files of target_container			repeat with file_ref in contained_files				set _file to {_name:name of file_ref}				set _file to _file & {_path:file_ref as text}				copy _file to the end of _files			end repeat					end tell	end if	set answer to answer & {_folders:_sub_folders}	set answer to answer & {_files:_files}end list_path--list_path("shared-disk:")--list_path("hard-disk:Library:")--list_path("hard-disk:Applications:")on file_info(file_path)		tell application "Finder"		set file_info_ref to info for file file_path		set answer to {_file_path:file_path}		set answer to answer & {_alias:alias of file_info_ref}		set answer to answer & {_type_identifier:type identifier of file_info_ref as string}		if file_info_ref contains {locked:true} then			set answer to answer & {_locked:true}		else			set answer to answer & {_locked:false}		end if		if file_info_ref contains {busy status:true} then			set answer to answer & {_busy_status:true}		else			set answer to answer & {_busy_status:false}		end if		return answer	end tell	end file_info--file_info("shared-disk:system-tests.presentation-remote:chapter00_Introduction.ppt")